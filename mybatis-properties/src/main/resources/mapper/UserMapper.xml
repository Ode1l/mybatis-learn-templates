<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--一个语句既可以通过 XML 定义，也可以通过注解定义。
我们先看看 XML 定义语句的方式，事实上 MyBatis 提供的所有特性都可以利用基于 XML 的映射语言来实现，这使得 MyBatis 在过去的数年间得以流行。
如果你用过旧版本的 MyBatis，你应该对这个概念比较熟悉。
但相比于之前的版本，新版本改进了许多 XML 的配置，后面我们会提到这些改进。
这里给出一个基于 XML 映射语句的示例，它应该可以满足上个示例中 SqlSession 的调用。-->
<mapper namespace="com.iris.dao.UserMapper">
    <select id="getUserList" resultType="UserAlias">
        select
            *
        from mybatis.users;
    </select>
    <select id="getUserByName" parameterType="java.lang.String" resultType="UserAlias">
        select
            *
        from mybatis.users
        where users.name like '%' #{id} '%'
    </select>
    <insert id="addUser" parameterType="UserAlias">
        insert into mybatis.users (id ,name, age, city) values (#{id}, #{name}, #{age}, #{city});
    </insert>
    <insert id="addUserObj" parameterType="java.util.Map">
        insert into mybatis.users (name, age, city) values ( #{userName}, #{userAge}, #{userCity});
    </insert>

    <update id="updateUser" parameterType="UserAlias">
        update mybatis.users
        set age = #{age},
            city = #{city}
        where name = #{name}
    </update>
    <delete id="deleteUser" parameterType="UserAlias">
        delete
        from mybatis.users
        where name = #{name};
    </delete>
</mapper>