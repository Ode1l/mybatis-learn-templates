# OFF	最高级别，关闭所有日志
# FATAL	每个错误事件将会导致退出应用程序，这个时候可以停止应用程序了
# ERROR	虽然发生错误事件，但是不影响系统的继续运行。打印错误异常和信息，如果不需要打印太多，可以使用这个级别
# WARN	会出现潜在错误信息，有些信息不是错误信息，但是需要给程序员一些提示
# INFO	消息在粗粒度级别上突出强调应用程序的运行过程，打印一些感兴趣或者重要的信息。这个可以用于生产环境中输出程序的一些重要信息，但是不能滥用
# DEBUG	指出细粒度事件对于调试还是费城有帮助的，主要打印一些在开发过程中打印一些运行信息
# TRACE	很低级别的日志，一般不会用
# ALL	级别最低，打印所有日志
# log4j 推荐只使用 ERROR, WARN, INFO, DEBUG
# log4j.rootLogger = [ level ], appenderName, appenderName,appenderName 指定日志发送到哪个地方，可以同时指定多个输出地
log4j.rootLogger = debug,console,file
# ConsoleAppender	控制台
# FileAppender	文件
# DailyRollingFileAppender	每天产生一个文件	当天之后日志文件就会被以xxx+昨天的日期来命名，也就是每天一个日志文件
# RollingFileAppender	文件到达指定大小产生一个新文件	当日志文件到底指定尺寸时，那么原来的日志文件将会被加上序号，例如xxx.1,值得注意的是，若是再超过指定尺寸(MaxFileSize)需要增加一个日志文件时，那么原来xxx.1的文件会加上1变成xxx.2。也就是说，数字越大的日志文件记录的日志时间越早！
# WriterAppender	将日志以流的形式发送到任意指定地方	ConsoleAppender和FileAppender的父类，一般不直接使用，而是会使用其子类，如ConsoleAppender
# net.SMTPAppender	邮件
# jdbc.JDBCAppender	数据库

# 控制台输出的相关设置
log4j.appender.console = org.apache.log4j.ConsoleAppender
log4j.appender.console.Target = System.out
log4j.appender.console.Threshold = DEBUG
log4j.appender.console.layout = org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern = [%c]-%m%n



# 控制台输出的相关配置
log4j.appender.file = org.apache.log4j.RollingFileAppender
log4j.appender.file.file = ./log/iris.log
log4j.appender.file.MaxFileSize = 10mb
log4j.appender.file.Threshold = DEBUG
log4j.appender.file.layout = org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern = [%p][%d{yy-MM-dd}][%c]%m%n

# 日志数据级别
log4j.logger.org.mybatis = DEBUG
log4j.logger.java.sql = DEBUG
log4j.logger.java.Statement = DEBUG
log4j.logger.java.ResultSet = DEBUG
log4j.logger.java.PreparedStatement = DEBUG